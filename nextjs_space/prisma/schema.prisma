generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/ai_studio_clone/nextjs_space/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  projects      Project[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id             String @id @default(cuid())
  userId         String
  name           String
  description    String?
  githubRepoUrl  String?
  
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  files          File[]
  chatMessages   ChatMessage[]
  
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model File {
  id         String  @id @default(cuid())
  projectId  String
  path       String
  content    String? @db.Text
  language   String?
  
  project    Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  @@unique([projectId, path])
}

model ChatMessage {
  id        String  @id @default(cuid())
  projectId String
  role      String  // 'user' or 'assistant'
  content   String  @db.Text
  model     String?
  
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
}
